//-----------------------------------------------------------------------------
// Command template for .crpa files. 
//-----------------------------------------------------------------------------
These files must be valid UTF-8 (no BOM). If not, then undefined behavior or 
crashed might happen.
 
It follows this template below:
CMD <SUB_CMD> -OPTIONS <OPTION_VALUE> <PARAMETER> <...REST>

Explained:
If something has a questionmark after it (?) it means it's optional. 

CMD             The crpa command to run. These will mostly be for grouping 
                related commands together.

SUB_CMD         The subcommand to CMD. These might not always exist, in which 
                case CMD is the "subcommand".

-OPTIONS            There can be multiple options for a command or none at all.
                    These will always for tweaking purpeses. They can take a 
                    value in the form of OPTION_VALUE. These must be used 
                    before positional arguments.
   
OPTION_VALUE        The value given after an OPTIONS is the value it should 
                    have. If none given it will be set to the default value 
                    described.
   
PARAMETER           A positional argument to the command/subcommand.
   
...REST             Positional arguments after everything else. These are 
                    always optional and is mostly for other things, you might 
                    want arguments to be sent to 
                    (external programs, webservices ect.).
   
Variables are handled a little bit different. If the line starts with a $ 
followed by a name, it means you retrieve the value of that variable. If 
you want to set a variable to the result of a command, you can do it like 
this:
   
$exit_code = APP RUN -BATCH ECHO Grilled horse!
   
You can also set it to stuff like, Strings, numbers, booleans and None. 
Strings must be in qoutes ("").

// This line is a comment.
$question = "How much time have i wasted? (years)"
$answer = 24
$is_answer_true = true
$error_var = true // This line will be an error (FIX IT LATER).
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Variable types.
//-----------------------------------------------------------------------------
String  "Hello" Normal String type. Defined by putting text in double qoutes.
                Strings must be UTF-8 valid (NO BOM).
Char    'a'     A character. A charcter is defined by using single qoutes.
Bool    true    A Boolean type. This is either true or false.
Number  42      Numbers of any kind. Floating-point numbers are not yet 
                supported.
List    [1, 2]  A Dynamic sized list, that can grow or shrink. 
                (NOT YET SUPPORTED)
Object  {A: 1}  Objects are key-value pairs. (NOT YET SUPPORTED)

Other variable types exist, but they can only be optained through 
Commands:

HWND            Window Handle on Win32. These are also used by elements, like 
                buttons, textfields, tabs asf. batch-rpa, transforms it a little, 
                to be more like an object, instead of af raw handle. (FUTURE)

//-----------------------------------------------------------------------------
// Predefined variables and their type:
//-----------------------------------------------------------------------------
$cwd            String      Current working directory.
$username       String      Username of the current user.
$hostname       String      Name of the current computer.
$domain         String      The domain of the current domain / user.
$temp           String      Path to the TEMP folder.
$script_root    String      The folder in which the script is. Useful for 
                            relative paths.

//-----------------------------------------------------------------------------
// Commands.
//-----------------------------------------------------------------------------

// Variable management.
VAR 
    // Returns the type of the variable.
    TYPE 
        // Name of the variable (without $).
        <NAME>
    
// Environment variables.
ENV 
    // Retrieves a environment variable. Returns a String.
    GET 

        // The name of the environment variable. This is a string.
        <NAME> 

    // Sets and environment variable.
    SET 

        // The name of the environment variable. This is a string.
        <NAME> 

        // The value the set. <VALUE> is a String.
        <VALUE> 

// Commands for handling windows.
WINDOW 
    // Sets the window state.
    STATE 
        // Window title to find. <TITEL> is a String.
        -TITEL <TITEL> 

        // Window class to find. <CLASS> is a String.
        -CLASS <CLASS> 

        // A handle to the given window. <HANDLE> is a HWND (Window handle).
        -HANDLE <HANDLE> 

        // The window state to set. Can be 1 of the following values: 
        // SHOW, HIDE, MAXIMIZED or MINIMIZED.
        <STATE> 

    // Finds a window and returns a HWND (Window handle). (UNFINISHED)
    FIND 

        // Window title/text to find. <TITEL> is a String.
        -TITEL <TITEL> 

        // Window class to find. <CLASS> is a String.
        -CLASS <CLASS> 

// Displays text or variables to the screen.
CONSOLE 
    // Displays a readable text to the screen. These will dereference the 
    // variables and just isplay their values.
    PRINT 
        // Message to display. This can be a String or a Variable.
        <MSG> 

    // Displays debug info to the screen. This is to help with values in 
    // Variables.
    DEBUG 
        // The variable to display. It will be in the format of: 
        // Name: Type = Value
        // Name = Type(Value)
        <VAR>

// Prompt based commands. These can display messages to the user and recieving 
// input.
PROMPT 
    // Displays a message. Returns a String based on the button pressed in 
    // english.
    SHOW 
        // Icon that should be displayed. These are built-ins in Windows. 
        // <ICON> can be one of the following values: INFO, WARNING, QUESTION or 
        // ERROR.
        -ICON <ICON> 

        // What buttons to be displayed. <BUTTONS> that can be one of the 
        // following values: OK, OK_CANCEL, RETRY_CANCEL, YES_NO or YES_NO_CANCEL.
        // Default is: OK.
        -BUTTONS <BUTTONS> 

        // The default button to be selected. ONLY USE WITH THE -BUTTONS 
        // OPTION. <NUMBER> is a Number and can be bewteen 0-3. Default is: 0.
        -DEFAULT_BUTTON <NUMBER>

        // Title of the prompt. <TITLE> should be a String.
        -TITLE <TITLE> 

        // If the prompt should always be, the top most window.
        -TOP_MOST 

        // The message to be displayed. <MSG> is a String.
        <MSG> 
    
    // Input based prompt. returns the input as a String.
    INPUT 
        // Title of the inputbox. <TITLE> is a String.
        -TITLE <TITLE> 

        // Sets the prompt type. <TYPE> can be on of the following values:
        // SECRET, FILE_SELECT, TEXT. Default is: TEXT.
        -PROMPT_TYPE <TYPE> 

        // The default value in the input field. <VALUE> is a String.
        -DEFAULT_VALUE <VALUE> 

        // The message to display above the input field.
        <MSG> 

// Commands related to applications/programs on Windows.
APP
    // Starts a application. Returns true or false, based on, if it was a 
    // success.
    RUN 
        // Wait for the app to close, before continuing.
        -WAIT 

        // Run it through cmd.exe. This allows cmd-commands to be run. 
        // CAN'T BE USED WITH -PWSH!
        -BATCH 

        // Run it through powershell.exe. Thos allows for PowerShell cmdlets to be 
        // run. CAN'T BE USED WITH -BATCH!
        -PWSH 

        // The path to the program, that should be run.
        <EXE_PATH> 

        // These arguments will be passed to the program, you want to run.
        <...EXE_ARGS>
    
    // Stops an application.
    STOP
        // Force exists the application.
        -FORCE

        // the name of the program to close. This is a String.
        <NAME>

// Stops the program with a success exit code.
EXIT 
    // Stops the program with an error. <MSG> is optional and is a string.
    -ERROR <MSG?> 

